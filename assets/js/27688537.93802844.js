"use strict";(self.webpackChunkserenity_users_guide=self.webpackChunkserenity_users_guide||[]).push([[6542],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(n),k=r,h=m["".concat(o,".").concat(k)]||m[k]||u[k]||l;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},857:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const l={id:"screenplay_ensure",sidebar_position:4},i="Making Screenplay Assertions with Serenity Ensure",s={unversionedId:"screenplay/screenplay_ensure",id:"screenplay/screenplay_ensure",isDocsHomePage:!1,title:"Making Screenplay Assertions with Serenity Ensure",description:"Introduction",source:"@site/docs/screenplay/screenplay-ensure.md",sourceDirName:"screenplay",slug:"/screenplay/screenplay_ensure",permalink:"/docs/screenplay/screenplay_ensure",editUrl:"https://github.com/serenity-bdd/documentation/docs/screenplay/screenplay-ensure.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"screenplay_ensure",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Working with REST APIs using Serenity Screenplay",permalink:"/docs/screenplay/screenplay_rest"},next:{title:"Selenium Grid",permalink:"/docs/cloud/selenium-grid"}},o=[{value:"Introduction",id:"introduction",children:[]},{value:"Introducing Serenity Ensure",id:"introducing-serenity-ensure",children:[]},{value:"Adding Serenity Ensure to your project",id:"adding-serenity-ensure-to-your-project",children:[]},{value:"Your first Ensure test",id:"your-first-ensure-test",children:[]},{value:"Assertions about numbers",id:"assertions-about-numbers",children:[]},{value:"Assertions about Strings",id:"assertions-about-strings",children:[{value:"String contents",id:"string-contents",children:[]},{value:"String Size",id:"string-size",children:[]}]},{value:"Assertions using Lambda expressions",id:"assertions-using-lambda-expressions",children:[]},{value:"Negative assertions",id:"negative-assertions",children:[]},{value:"Working with dates and times",id:"working-with-dates-and-times",children:[]},{value:"Working with collections",id:"working-with-collections",children:[]},{value:"Assertions about list equality and size",id:"assertions-about-list-equality-and-size",children:[]},{value:"Matching list elements with Java 8 Lambdas",id:"matching-list-elements-with-java-8-lambdas",children:[]},{value:"Using Named Expectations",id:"using-named-expectations",children:[]},{value:"Working with web elements",id:"working-with-web-elements",children:[{value:"Simple web element assertions",id:"simple-web-element-assertions",children:[]},{value:"Waiting for elements and defining timeouts",id:"waiting-for-elements-and-defining-timeouts",children:[]},{value:"Making assertions about the current page",id:"making-assertions-about-the-current-page",children:[]}]},{value:"Working with Screenplay Questions",id:"working-with-screenplay-questions",children:[]},{value:"Reporting and hiding Ensure steps",id:"reporting-and-hiding-ensure-steps",children:[]}],d={toc:o};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"making-screenplay-assertions-with-serenity-ensure"},"Making Screenplay Assertions with Serenity Ensure"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Web tests are a common use case for Screenplay scenarios, where we try to model user behaviour and interactions with the system. In this section, we will learn how to interact with a web application using the Screenplay WebDriver integration."),(0,r.kt)("p",null,"We have seen how make assertions using the ",(0,r.kt)("inlineCode",{parentName:"p"},"should()")," method with\ntargets or questions combined with Hamcrest matchers, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'sam.attemptsTo(\n  Enter.theValue("40").into(AGE_FIELD).thenHit(Keys.ENTER)\n);\n\nsam.should(\n    seeThat(the(AGE_FIELD), hasValue("40"))\n);\n')),(0,r.kt)("p",null,"In the code shown here, the ",(0,r.kt)("inlineCode",{parentName:"p"},"the()")," method is a static import from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"WebElementQuestion")," class, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"hasValue()")," is a static import from\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"WebElementStateMatchers")," class. This is quite flexible, as you can\nadd custom matchers quite easily. However, it means you need to know\nwhat matchers exist, and which ones can be used in different\ncircumstances."),(0,r.kt)("h2",{id:"introducing-serenity-ensure"},"Introducing Serenity Ensure"),(0,r.kt)("p",null,"Serenity Screenplay also provides an alternative approach, which many developers find easier to use and faster to write. This approach uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," class. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," class produces a ",(0,r.kt)("inlineCode",{parentName:"p"},"Performable"),", so you can integrate them directly into the ",(0,r.kt)("inlineCode",{parentName:"p"},"attemptsTo()")," method. It also has a very readable DSL and lets you use code completion to discover the assertions you can use for different values, making writing assertions easier and quicker. An example of code equivalent to the above can be seen here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'sam.attemptsTo(\n    Enter.theValue("40").into(AGE_FIELD).thenHit(Keys.ENTER),\n    Ensure.that(AGE).text().isEqualTo("40")\n);\n')),(0,r.kt)("p",null,"In this section, you will learn how to use ",(0,r.kt)("em",{parentName:"p"},"Serenity Ensure")," to write fluent assertions for your own projects."),(0,r.kt)("h2",{id:"adding-serenity-ensure-to-your-project"},"Adding Serenity Ensure to your project"),(0,r.kt)("p",null,"Serenity Ensure needs an extra dependency in your build script. For\nMaven, add the ",(0,r.kt)("inlineCode",{parentName:"p"},"serenity-enusre")," dependency to your ",(0,r.kt)("inlineCode",{parentName:"p"},"pom.xml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>net.serenity-bdd</groupId>\n    <artifactId>serenity-ensure</artifactId>\n    <version>${serenity.version}</version>\n    <scope>test</scope>\n</dependency>\n")),(0,r.kt)("p",null,"And in Gradle, you need to add the following dependency:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'testCompile "net.serenity-bdd:serenity-screenplay-webdriver:${serenity.version}"\n')),(0,r.kt)("h2",{id:"your-first-ensure-test"},"Your first Ensure test"),(0,r.kt)("p",null,"A very simple ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," test can be seen here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Actor aster = Actor.named("Aster");\n\nint age = 20;\n\naster.attemptsTo(\n    Ensure.that(age).isEqualTo(20)              \n);\n')),(0,r.kt)("p",null,"Almost all ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," assertions start with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that()")," method. This method takes the value being tested as a parameter (in this\ncase an integer). Following this comes the actual assertion method."),(0,r.kt)("h2",{id:"assertions-about-numbers"},"Assertions about numbers"),(0,r.kt)("p",null,"You can use auto-complete in your IDE to see the range of assertions\navailable. For integers, longs and floating point numbers, the\nassertions include:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isEqualTo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(age).isEqualTo(18)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isNotEqualTo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(age).isNotEqualTo(65)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isGreaterThan"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(age).isGreaterThan(18)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isGreaterThanOrEqualTo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(age).isGreaterThanOrEqualTo(20)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isLessThan"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(age).isLessThan(100)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isBetween"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(age).isBetween(18,25)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isStrictlyBetween"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(age).isStrictlyBetween(20,25)"))))),(0,r.kt)("p",null,"For doubles and floats, you can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isCloseTo()")," assertion:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"float creditScore = 9.8F;\n\naster.attemptsTo(\n    Ensure.that(creditScore).isCloseTo(9.81F, 0.01F)\n);\n")),(0,r.kt)("h2",{id:"assertions-about-strings"},"Assertions about Strings"),(0,r.kt)("p",null,"Another common requirement is to make assertions about Strings. An\nexample is shown here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String name = "Bill";\naster.attemptsTo(\n    Ensure.that(name).isEqualToIgnoringCase("BILL")\n);\n')),(0,r.kt)("p",null,"Other basic comparison assertions about Strings include the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isEqualTo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(name).isEqualTo("Bill")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isNotEqualTo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(name).isNotEqualTo("Joe")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isGreaterThan"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(name).isGreaterThan("Alfred")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isGreaterThanOrEqualTo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(name).isGreaterThanOrEqualTo("Al")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isLessThan"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(name).isLessThan("Carrie")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isBetween"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(name).isBetween("Bill","Carrie")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isStrictlyBetween"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(name).isStrictlyBetween("Al",25)'))))),(0,r.kt)("h3",{id:"string-contents"},"String contents"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," class also has a number of assertions related to string\ncontents. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String colors = "Red Green Blue";\naster.attemptsTo(\n    Ensure.that(colors).contains("Green")\n);\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsIgnoringCase"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).containsIgnoringCase("RED")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsOnlyDigits"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("123").containsOnlyDigits()'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsOnlyLettersOrDigits"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("abc123").containsOnlyLettersOrDigits()'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsOnlyLetters"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("abc").containsOnlyLetters()'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsWhitespaces"),(0,r.kt)("td",{parentName:"tr",align:null},'`Ensure.that("Red Green").containsWhitespaces()')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsOnlyWhitespaces"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("   ").containsOnlyWhitespaces()'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"startsWith"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).startsWith("Red")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endsWith"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).endsWith("Blue")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"matches"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).matches("Red (.*) Blue")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"doesNotContain"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).doesNotContain("cyan")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isBlank()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("  ").isBlank()'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isNotBlank()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).isNotBlank()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isEmpty()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("").isEmpty()'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isNotEmpty()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).isNotEmpty()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isInLowerCase()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("red").isInLowerCase()'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isInUpperCase()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("RED").isInUpperCase()'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isSubstringOf"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("Green").isSubstringOf(colors)'))))),(0,r.kt)("h3",{id:"string-size"},"String Size"),(0,r.kt)("p",null,"There are also some assertions to check the length of the\nstring For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String colors = "Red Green Blue";\naster.attemptsTo(\n    Ensure.that(colors).hasSizeGreaterThan(3)\n);\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSize"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("red").hasSize(3)'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSizeGreaterThan"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("red").hasSizeGreaterThan(2)'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSizeGreaterThanOrEqualTo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("red").hasSizeGreaterThanOrEqualTo(3)'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSizeLessThan"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("red").hasSizeLessThan(4)'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSizeLessThanOrEqualTo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("red").hasSizeLessThanOrEqualTo(3)'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSizeBetween"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that("red").hasSizeBetween(1,5)'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasLineCount"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).hasLineCount(1)"))))),(0,r.kt)("h2",{id:"assertions-using-lambda-expressions"},"Assertions using Lambda expressions"),(0,r.kt)("p",null,"Another useful trick is to use a Java 8 Lambda expression to do the\ncheck. You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).matches(...)")," construct to pass\nin a lambda predicate which will determine whether the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure"),"\nstatement should pass or fail."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String actualColor = "green";\n\naster.attemptsTo(\n    Ensure.that(actualColor).matches("is an RGB color",        \n                              color -> color.equals("red")     \n                                       || color.equals("blue")\n                                       || color.equals("green"))\n);\n')),(0,r.kt)("h2",{id:"negative-assertions"},"Negative assertions"),(0,r.kt)("p",null,"You can negate an ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that()")," statement simply by including the\n",(0,r.kt)("inlineCode",{parentName:"p"},"not()")," method. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String colors = "Red Green Blue";\naster.attemptsTo(\n    Ensure.that(colors).not().contains("Cyan")\n);\n')),(0,r.kt)("h2",{id:"working-with-dates-and-times"},"Working with dates and times"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," class provides a few special methods for dates and times.\nFor ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalTime")," variables, we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).isBefore()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).isAfter()")," to compare two times, as we can see here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"LocalTime tenInTheMorning = LocalTime.of(10,0);\nLocalTime twoInTheAfternoon = LocalTime.of(14,0);\n\naster.attemptsTo(\n    Ensure.that(tenInTheMorning).isBefore(twoInTheAfternoon)\n);\n")),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDate")," variables, we have ",(0,r.kt)("inlineCode",{parentName:"p"},"isBefore()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"isAfter()"),", as well\nas a number of others, such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDayOfWeek()")," method illustrated\nhere:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"LocalDate firstOfJanuary = LocalDate.of(2000,1,1);\n\naster.attemptsTo(\n    Ensure.that(firstOfJanuary).isDayOfWeek(DayOfWeek.SATURDAY)\n);\n")),(0,r.kt)("p",null,"Other date-related assertions include:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isDayOfWeek"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(firstOfJanuary).isDayOfWeek(SATURDAY)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isDayOfMonth"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(firstOfJanuary).isDayOfMonth(1)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isInTheMonthOf"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(firstOfJanuary).isInTheMonthOf(JANUARY)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isTheYear"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(firstOfJanuary).isTheYear(2000)"))))),(0,r.kt)("h2",{id:"working-with-collections"},"Working with collections"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," class gives you a range of methods to make assertions about\ncollections. This can be as simple as checking whether an element\nappears in a collection: we can do this using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).isIn(...)")," construct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> colors = Arrays.asList("red", "green", "blue");\n\naster.attemptsTo(\n    Ensure.that("red").isIn(colors)\n);\n')),(0,r.kt)("p",null,"Suppose we had the following lists:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> sameColors = Arrays.asList("red", "green", "blue");\nList<String> differentColors = Arrays.asList("red", "green", "cyan");\nList<String> allColors = Arrays.asList("red", "green", "blue","yellow","cyan");\nList<String> lastColors = Arrays.asList("yellow","cyan");\nList<String> redAndPink = Arrays.asList("red", "pink");\nList<String> noColors = Arrays.asList();\n')),(0,r.kt)("p",null,"Here are some examples of other assertion methods using these\ncollections:"),(0,r.kt)("h2",{id:"assertions-about-list-equality-and-size"},"Assertions about list equality and size"),(0,r.kt)("p",null,"The following assertions are useful if you need to check the size of a\ncollection, or whether it is equivalent to another collection."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isEqualTo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).isEqualTo(sameColors)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isEmpty"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(noColors).isEmpty()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isNotEmpty"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).isNotEmpty()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSize"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).hasSize(3)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSizeGreaterThan"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).hasSizeGreaterThan(2)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSizeLessThan"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).hasSizeLessThan(4)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSizeBetween"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).hasSizeBetween(2,4)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasSameSizeAs"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).hasSameSize(differentColors)"))))),(0,r.kt)("h1",{id:"assertions-about-list-contents"},"Assertions about list contents"),(0,r.kt)("p",null,"Often we need to check the contents of a collection. We can do this\nusing a range of ",(0,r.kt)("em",{parentName:"p"},"contains")," assertions, as illustrated here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> colors = Arrays.asList("red", "green", "blue");\n\naster.attemptsTo(\n    Ensure.that(contains).contains("red")\n);\n')),(0,r.kt)("p",null,"Some of the other ",(0,r.kt)("em",{parentName:"p"},"contains")," assertions are listed in the table below:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"contains"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).contains("red","blue")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsAnyOf"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).anyOf("red","pink")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsOnly"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).containsOnly("blue","green","red")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsExactly"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).containsExactly("red","blue","green")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsExactlyInAnyOrder"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).containsExactly("red","blue","green")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"doesNotContain"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).doesNotContain("pink")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsElementsFrom"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(allColors).containsElementsFrom(colors)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsAnyElementsOf"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).containsAnyElementsOf(redAndPink)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsExactlyElementsOf"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).containsExactlyElementsOf(sameColors)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isASubsetOf"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).isASubsetOf(allColors)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"doesNotHaveDuplicates"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(colors).doesNotHaveDuplicates()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"startsWith"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).startsWith("red", "green")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"startsWithElementsFrom"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(allColors).startsWithElementsFrom(colors)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endsWith"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(colors).endsWith("green","blue")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endWithElementsFrom"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(allColors).endWithElementsFrom(lastColors)"))))),(0,r.kt)("h2",{id:"matching-list-elements-with-java-8-lambdas"},"Matching list elements with Java 8 Lambdas"),(0,r.kt)("p",null,"Lambda expressions provide a powerful way of making arbitrary assertions\nabout the contents of a collection. We can use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).allMatch()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).anyMatch()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).noneMatch()")," to do this. For example, the following\ncode asserts that each element in a collection is 4 characters long:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> colors = ImmutableList.of("blue", "cyan", "pink");\n\naster.attemptsTo(\n    Ensure.that(colors).allMatch("4 characters long",\n                                 it -> it.length() == 4)\n);\n')),(0,r.kt)("p",null,"Note that when we use a Lambda expression, we need to include a\ndescription of the expectation before providing the lambda expression\nitself. This description will be used in the reports should the\nassertion fail."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"anyMatch")," method checks that there exists at least one element in a\ncollection that matches a specified predicate. An example is shown here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void shouldContainAtLeastOnePrimaryColor() {\n    Actor aster = Actor.named("Aster");\n    List<String> colors = ImmutableList.of("blue", "cyan", "pink");\n\n    aster.attemptsTo(\n        Ensure.that(colors).anyMatch("is a primary color",\n                                     it ->  isAPrimaryColor(it))\n    );\n}\n\nprivate boolean isAPrimaryColor(String color) {\n    return  (color == "red")\n            || (color == "green")\n            || (color == "blue");\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"noneMatch")," method checks that no elements exist in a collection\nthat match a certain condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> colors = ImmutableList.of("orange", "cyan", "pink");\n\naster.attemptsTo(\n    Ensure.that(colors).noneMatch("is a primary color",\n                                  it ->  isAPrimaryColor(it))\n);\n')),(0,r.kt)("p",null,"You can also check for specific numbers of elements, using ",(0,r.kt)("inlineCode",{parentName:"p"},"atLeast"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"noMoreThan"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"exactly"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> colors = ImmutableList.of("blue", "cyan", "red","pink");\n\naster.attemptsTo(\n    Ensure.that(colors).atLeast(2, "is a primary color",\n                                it ->  isAPrimaryColor(it))\n);\n')),(0,r.kt)("h2",{id:"using-named-expectations"},"Using Named Expectations"),(0,r.kt)("p",null,"If you have commonly used predicates in your test code, you can use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"NamedExpectation")," to make your code more concise. For example, here we\ndefine a ",(0,r.kt)("inlineCode",{parentName:"p"},"NamedExpectation")," that matches primary colors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'private static final  NamedExpectation<String> IS_A_PRIMARY_COLOR\n        = new NamedExpectation<>("is a primary color",\n                               color -> (color.equals("red"))\n                                        || (color.equals("green"))\n                                        || (color.equals("blue")));\n')),(0,r.kt)("p",null,"We could use this in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that()")," method like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"aster.attemptsTo(\n    Ensure.that(colors).anyMatch(IS_A_PRIMARY_COLOR)\n);\n")),(0,r.kt)("h2",{id:"working-with-web-elements"},"Working with web elements"),(0,r.kt)("p",null,"When writing UI tests, we need to make assertions about the state of\nelements on a web page. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," class makes this an easy task."),(0,r.kt)("p",null,"We can make assertions about ",(0,r.kt)("inlineCode",{parentName:"p"},"Target")," elements directly using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Target FIRST_NAME = Target.the("First name field").locatedBy("#firstName")\n\naster.attemptsTo(\n    Ensure.that(FIRST_NAME).value().isEqualTo("Joe"),\n);\n')),(0,r.kt)("p",null,"A more flexible approach is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementLocated")," class to\nidentify an element. We can also locate elements using ",(0,r.kt)("inlineCode",{parentName:"p"},"By")," locators or\nCSS/XPath strings. The following code uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"ElementLocated.by()"),' methods to check whether the element located by\nthe CSS selector \\"#firstName\\" is displayed:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n    Ensure.that(ElementLocated.by("#firstName")).isDisplayed(),\n);\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementLocated.by()")," will work with ",(0,r.kt)("inlineCode",{parentName:"p"},"By")," locators, XPath/CSS\nstrings or ",(0,r.kt)("inlineCode",{parentName:"p"},"Target")," elements, which means that you can easily decouple\nyour locator strategy from your assertions."),(0,r.kt)("h3",{id:"simple-web-element-assertions"},"Simple web element assertions"),(0,r.kt)("p",null,"The most simple assertions about web elements are boolean checks about\nthe state of the element. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).is...")," assertions let\nyou make assertions about whether an element is displayed or disabled."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isDisplayed"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(FIRST_NAME).isDisplayed()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isDisabled"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(FIRST_NAME).isDisabled()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isEnabled"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(FIRST_NAME).isEnabled()"))))),(0,r.kt)("p",null,"+--------------------+-------------------------------------------------+"),(0,r.kt)("h1",{id:"checking-text-content-and-field-values"},"Checking text content and field values"),(0,r.kt)("p",null,"Checking field values and text content is the bread-and-butter of many\nweb tests. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).value()")," to read the value\nattribute of a field, as shown here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n    Ensure.that(FIRST_NAME).value().startsWith("Joe"),\n);\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).text()")," method lets you read the text of the\nelement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"aster.attemptsTo(\n    Ensure.that(SEARCH_RESULTS_SUMMARY)\n          .text()\n          .endsWith(\"results for 'Serenity'\"),\n);\n")),(0,r.kt)("p",null,"You can also read the text contents of an element using\n",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).textContent()"),". The text content is the value of the\n",(0,r.kt)("inlineCode",{parentName:"p"},"textContent")," CSS attribute."),(0,r.kt)("p",null,"This value is available even when an element is not visible, making it\nuseful in cases where you need to read a full set of values, even those\nnot currently visible on the page."),(0,r.kt)("p",null,"The most important ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...)")," methods for web elements include\nthe following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},'`Ensure.that(FIRST_NAME).value().isEqualTo("Joe')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},'")`')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"text"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(DESCRIPTION).text().isNotEmpty()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"textContent"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(DESCRIPTION).textContent().isNotEmpty()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"attribute"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(FIRST_NAME).attribute("title").isEqualTo("First name")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selectedValue"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(COLORS).selectedValue().isEqualTo("green")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selectedVisibleText"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(COLORS).selectedVisibleText().isEqualTo("Green")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasCssClass"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(COLORS).hasCssClass("color-list")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsElements"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(RESULT_LIST).containsElements(".result-details")'))))),(0,r.kt)("p",null,"+--------------------+-------------------------------------------------+"),(0,r.kt)("p",null,"All of these methods allow you to make all of the String assertions we\nsaw earlier."),(0,r.kt)("h1",{id:"converting-values-to-different-types"},"Converting values to different types"),(0,r.kt)("p",null,"Sometimes it is useful to be able to make assertions about non-String\ntypes. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n    Ensure.that(ElementLocated.by("#itemCount"))\n          .value()\n          .asAnInteger()\n          .isGreaterThanOrEqualTo(2)\n);\n')),(0,r.kt)("p",null,"The main conversion methods include:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"asAnInteger"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(ITEM_COUNT).value().asAnInteger().isEqualTo(2)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"asADouble"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(TOTAL_COST).value().asADouble().isEqualTo(99.99d)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"asAFloat"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(TOTAL_COST).value().asAFloat().isCloseTo(99.99f,0.01f)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"asABigDecimal"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.that(TOTAL_COST).value().asABigDecimal().isEqualTo(new BigDecimal("99.99"))'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"asADate"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(CURRENT_DATE).value().asADate().isEqualTo(expectedLocalDate)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"asATime"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(CURRENT_TIME).value().asATime().isEqualTo(expectedLocalTime)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"asABoolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.that(SOME_FLAG).value().asABoolean().is True()"))))),(0,r.kt)("p",null,"+--------------------+-------------------------------------------------+"),(0,r.kt)("p",null,"If a date or time value uses as non-standard format, we can pass a\nformat string to the ",(0,r.kt)("inlineCode",{parentName:"p"},"asADate()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"asATime()")," methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n    Ensure.that(ElementLocated.by("#currentDate"))\n          .value()\n          .asADate("dd-MM-yyyy")\n          .isBefore(dateLimit)\n);\n')),(0,r.kt)("h1",{id:"making-assertions-about-collections-of-web-elements"},"Making assertions about collections of web elements"),(0,r.kt)("p",null,"You can make assertions about multiple values, for example, all the\ntitles of a list of search results."),(0,r.kt)("p",null,"One way to do this is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.thatTheSetOf()")," method (or its\nsynonym, ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.thatAmongst()"),"). This method takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"Target")," or a\nlocator, and lets you apply the"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n        Ensure.thatTheSetOf(ElementsLocated.by(".train-line"))\n              .hasSizeGreaterThan(5)\n);\n')),(0,r.kt)("p",null,"We can also use static methods defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"TheMatchingElement")," to\nperform commonly used checks on web elements, e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n        Ensure.thatTheSetOf(ElementsLocated.by(".train-line"))\n              .allMatch(TheMatchingElement.containsText("Line"))\n);\n')),(0,r.kt)("p",null,"The main methods defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"TheMatchingElement")," class include:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isDisplayed"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.thatTheSetOf(RESULTS).allMatch(isDisplayed())"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isNotDisplayed"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.thatTheSetOf(RESULTS).noneMatch(isNotDisplayed())"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isDisabled"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.thatTheSetOf(INPUT_FIELDS).atLeast(1, isDisabled())"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isNotDisabled"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.thatTheSetOf(INPUT_FIELDS).atLeast(1, isNotDisabled())"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isEnabled"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.thatTheSetOf(INPUT_FIELDS).atLeast(1, isEnabled())"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isNotEnabled"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ensure.thatTheSetOf(INPUT_FIELDS).atLeast(1, isNotEnabled())"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasCssClass"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.thatTheSetOf(RESULTS).noMoreThan(1, hasCssClass("selected"))'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hasValue"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.thatTheSetOf(RESULTS).anyMatch(hasValue("red"))'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsText"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.thatTheSetOf(RESULTS).anyMatch(containsText("Red"))'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsOnlyText"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.thatTheSetOf(RESULTS).anyMatch(containsOnlyText("Red Car"))'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containsElementsLo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Ensure.thatTheSetOf(RESULTS).anyMatch(containsElementsLocatedBy(".model"))'))))),(0,r.kt)("p",null,"+--------------------+-------------------------------------------------+"),(0,r.kt)("p",null,"We can also make assertions about collections of matching values or the\ntext contents of matching elements. We can do this using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).values()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).textValues()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that(...).textContentValues()"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n    Ensure.that(ElementLocated.by("#colors option"))\n          .values()\n          .contains("red","blue","green")\n);\n')),(0,r.kt)("h3",{id:"waiting-for-elements-and-defining-timeouts"},"Waiting for elements and defining timeouts"),(0,r.kt)("p",null,"When working with asynchronous web applications, an element may not be\nimmediately ready when a test interacts with it. By default, Serenity\nwill wait for 5 seconds for an element to be present. Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure"),"\nclass, we can fine-tune the amount of time we need to wait for an\nelement to become available. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Target SLOW_FIELD = Target.the("Slow field")\n                          .locatedBy("#slow")\n\naster.attemptsTo(\n        Ensure.that(SLOW_FIELD.waitingForNoMoreThan(Duration.ofSeconds(10)))\n              .value()\n              .isEqualTo("Marseille")\n);\n')),(0,r.kt)("p",null,"We can also build a delay into a ",(0,r.kt)("inlineCode",{parentName:"p"},"Target")," field, if the same delay\nshould be applied everywhere the element is used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Target SLOW_FIELD = Target.the("Slow field")\n                      .locatedBy("#slow")\n                      .waitingForNoMoreThan(Duration.ofSeconds(5))\n')),(0,r.kt)("h3",{id:"making-assertions-about-the-current-page"},"Making assertions about the current page"),(0,r.kt)("p",null,"There are also some ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," methods that allow us to make basic\nassertions about the page itself. For example, you can check the page\ntitle like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n        Ensure.thatTheCurrentPage().title().isEqualTo("Some Title")\n);\n')),(0,r.kt)("p",null,"Page-level assertions also include ",(0,r.kt)("inlineCode",{parentName:"p"},"currentUrl()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSource()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"windowHandle()"),"."),(0,r.kt)("h2",{id:"working-with-screenplay-questions"},"Working with Screenplay Questions"),(0,r.kt)("p",null,"So far we have been using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that*")," methods with web page\nlocators and with field values. We can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.that*")," methods\nwith arbitrary Screenplay questions. This can be used to write custom\n",(0,r.kt)("inlineCode",{parentName:"p"},"Question")," classes or methods that query the state of the application\nwithout using the UI, or which do more tailored queries of the UI."),(0,r.kt)("p",null,"For example,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public Question<Integer> countOf(String todoItem) {\n    return Question.about("todo status").answeredBy(\n            actor -> // return some value related to a particular todo item\n    );\n}\n')),(0,r.kt)("p",null,"We could then use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.thatTheAnswerTo()")," method to check the\nresult of this question:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n        Ensure.thatTheAnswerTo("the count",\n                               countOf("some-todo-item"))\n              .isEqualTo(1)\n);\n')),(0,r.kt)("p",null,"We can also work with ",(0,r.kt)("inlineCode",{parentName:"p"},"Question")," classes that return collections, using\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.thatTheAnswersTo()")," method. Suppose we had a Question that\nreturned a list of Strings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Question<Collection<String>> colors() {\n    return Question.about("colors").answeredBy(\n            actor -> // returns "red","green","blue"\n    );\n}\n')),(0,r.kt)("p",null,"We could then use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure.thatTheAnswersTo()")," method to make an\nassertion about this question:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n        Ensure.thatTheAnswersTo(colors()).contains("red")\n);\n')),(0,r.kt)("h2",{id:"reporting-and-hiding-ensure-steps"},"Reporting and hiding Ensure steps"),(0,r.kt)("p",null,"Each ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," performable will be reported in the Serenity report as a\nseparate step, including a short description of the expectation.\nSometimes, however, we want to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," statement as a way to\nmake sure the application is ready to continue the tests. In these\ncases, we may prefer to leave the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ensure")," statement out of the reports."),(0,r.kt)("p",null,"We can do this using the ",(0,r.kt)("inlineCode",{parentName:"p"},"silently()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'aster.attemptsTo(\n    Ensure.that(ElementLocated.by("#firstName"))\n          .silently()\n          .isDisplayed()\n);\n')))}p.isMDXComponent=!0}}]);