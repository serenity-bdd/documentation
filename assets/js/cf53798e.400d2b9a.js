"use strict";(self.webpackChunkserenity_users_guide=self.webpackChunkserenity_users_guide||[]).push([[671],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7289:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],o={id:"screenplay_fundamentals",sidebar_position:1},l="Screenplay Fundamentals",c={unversionedId:"screenplay/screenplay_fundamentals",id:"screenplay/screenplay_fundamentals",isDocsHomePage:!1,title:"Screenplay Fundamentals",description:"The Screenplay Pattern is a modern test automation design pattern intented to make it easier to write scalabble, maintainable test code. You can get a quick overview of a simple Screenplay test here.",source:"@site/docs/screenplay/screenplay_fundamentals.md",sourceDirName:"screenplay",slug:"/screenplay/screenplay_fundamentals",permalink:"/documentation/docs/screenplay/screenplay_fundamentals",editUrl:"https://github.com/serenity-bdd/documentation/docs/screenplay/screenplay_fundamentals.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"screenplay_fundamentals",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Running Cucumber scenarios with Serenity",permalink:"/documentation/docs/guide/cucumber"},next:{title:"Web Testing with Serenity Screenplay",permalink:"/documentation/docs/screenplay/user_guide_screenplay_webtesting"}},p=[{value:"Setting up a Screenplay test",id:"setting-up-a-screenplay-test",children:[{value:"Screenplay and JUnit 4",id:"screenplay-and-junit-4",children:[]},{value:"Screenplay and JUnit 5",id:"screenplay-and-junit-5",children:[]},{value:"Screenplay and Cucumber",id:"screenplay-and-cucumber",children:[]}]},{value:"Defining the actors",id:"defining-the-actors",children:[{value:"Actors in JUnit",id:"actors-in-junit",children:[]},{value:"Actors in Cucumber",id:"actors-in-cucumber",children:[]}]},{value:"Grouping interactions into tasks",id:"grouping-interactions-into-tasks",children:[{value:"Grouping interactions using the Task class",id:"grouping-interactions-using-the-task-class",children:[]},{value:"Using lambda expressions to create custom tasks",id:"using-lambda-expressions-to-create-custom-tasks",children:[]},{value:"Writing custom Performable classes.",id:"writing-custom-performable-classes",children:[]}]},{value:"Questions - querying the state of the system",id:"questions---querying-the-state-of-the-system",children:[]}],u={toc:p};function d(e){var t=e.components,o=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"screenplay-fundamentals"},"Screenplay Fundamentals"),(0,i.kt)("p",null,"The Screenplay Pattern is a modern test automation design pattern intented to make it easier to write scalabble, maintainable test code. You can get a quick overview of a simple Screenplay test ",(0,i.kt)("a",{parentName:"p",href:"../../docs/tutorials/screenplay"},"here"),"."),(0,i.kt)("p",null,"In this section, we will look at how to write high quality test automation using the Screenplay pattern in more detail. We will intially focus on interacting with a web application using Selenium - in the following sections, we will see how to interact with APIs and databases using the Screenplay model."),(0,i.kt)("p",null,"In Screenplay we model ",(0,i.kt)("em",{parentName:"p"},"actors")," who interact with an application in various ways to perform ",(0,i.kt)("em",{parentName:"p"},"tasks")," that help them acheive their goals. Actors have ",(0,i.kt)("em",{parentName:"p"},"abilities"),", such as the ability to interact with a web browser or query a database, that help them perform these tasks. Actors can also answer ",(0,i.kt)("em",{parentName:"p"},"questions")," about the state of the system, so that we can check whether a feature is behaving the way we would expect it to."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8375).Z})),(0,i.kt)("h2",{id:"setting-up-a-screenplay-test"},"Setting up a Screenplay test"),(0,i.kt)("p",null,"Serenity BDD Screenplay tests can be written using any framwork that works with Serenity BDD. We will start by discussing how to set up a simple Serenity Screenplay test case using common libraries such as JUnit 4, JUnit 5 and Cucumber."),(0,i.kt)("h3",{id:"screenplay-and-junit-4"},"Screenplay and JUnit 4"),(0,i.kt)("p",null,"Running a Screenplay test in JUnit 4 and JUnit 5 is no different to any other Serenity BDD test. For JUnit 4, add the ",(0,i.kt)("inlineCode",{parentName:"p"},"serenity-junit")," dependency to your project if it is not already there:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>net.serenity-bdd</groupId>\n            <artifactId>serenity-junit</artifactId>\n            <version>${serenity.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>net.serenity-bdd</groupId>\n            <artifactId>serenity-screenplay</artifactId>\n            <version>${serenity.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>net.serenity-bdd</groupId>\n            <artifactId>serenity-screenplay-webdriver</artifactId>\n            <version>${serenity.version}</version>\n            <scope>test</scope>\n        </dependency>\n")),(0,i.kt)("p",null,"Next, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"SerenityRunner")," class in your test class, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import net.serenitybdd.junit.runners.SerenityRunner;\nimport org.junit.Test;\n\n@RunWith(SerenityRunner.class)\npublic class AddNewTodos {\n\n    @Test\n    public void addToEmptyList() {...}\n}\n")),(0,i.kt)("h3",{id:"screenplay-and-junit-5"},"Screenplay and JUnit 5"),(0,i.kt)("p",null,"For JUnit 5, just add the following dependency to your project (this will also support legacy JUnit 4 tests):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>net.serenity-bdd</groupId>\n            <artifactId>serenity-junit5</artifactId>\n            <version>${serenity.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>net.serenity-bdd</groupId>\n            <artifactId>serenity-screenplay</artifactId>\n            <version>${serenity.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>net.serenity-bdd</groupId>\n            <artifactId>serenity-screenplay-webdriver</artifactId>\n            <version>${serenity.version}</version>\n            <scope>test</scope>\n        </dependency>\n")),(0,i.kt)("p",null,"Next, you need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"SerenityJUnit5Extension")," class, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import net.serenitybdd.junit.runners.SerenityJUnit5Extension;\nimport org.junit.jupiter.api.Test;\n\n@RunWith(SerenityRunner.class)\nclass AddNewTodos {\n\n    @Test\n    @DisplayName("Add a todo item to an empty list")\n    void addToEmptyList() {...}\n}\n')),(0,i.kt)("h3",{id:"screenplay-and-cucumber"},"Screenplay and Cucumber"),(0,i.kt)("p",null,"To run a Screenplay scenario with Cucumber and Serenity, you just need the standard Screenplay dependencies along with the ",(0,i.kt)("inlineCode",{parentName:"p"},"serenity-cucumber")," dependency, as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>net.serenity-bdd</groupId>\n            <artifactId>serenity-cucumber</artifactId>\n            <version>${serenity.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>net.serenity-bdd</groupId>\n            <artifactId>serenity-screenplay</artifactId>\n            <version>${serenity.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>net.serenity-bdd</groupId>\n            <artifactId>serenity-screenplay-webdriver</artifactId>\n            <version>${serenity.version}</version>\n            <scope>test</scope>\n        </dependency>\n")),(0,i.kt)("p",null,"There is no difference when running the Cucumber scenarios either - you simply use the same JUnit 4 runner class as you would for a normal Serenity Cucumber scenario:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import io.cucumber.junit.CucumberOptions;\nimport net.serenitybdd.cucumber.CucumberWithSerenity;\nimport org.junit.runner.RunWith;\n\n@RunWith(CucumberWithSerenity.class)\n@CucumberOptions(\n        features = "classpath:features"\n)\npublic class TestSuite {}\n')),(0,i.kt)("h2",{id:"defining-the-actors"},"Defining the actors"),(0,i.kt)("p",null,"Every Screenplay test needs at least one actor (and some have several). There are several ways we can define an actor, which vary slightly depending on the test framework you are using."),(0,i.kt)("h3",{id:"actors-in-junit"},"Actors in JUnit"),(0,i.kt)("p",null,"One way to create a new actor is to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Actor.named()")," method. For example, to create an actor named Toby, we could write the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'Actor toby = Actor.named("Toby");\n')),(0,i.kt)("p",null,"However this actor will not be able to do very much until we give him the ability to interact with our application. That's where ",(0,i.kt)("em",{parentName:"p"},"abilities")," come into play."),(0,i.kt)("p",null,"The most commonly-needed ability is the ability to browse the web using a web automation library such as Selenium or Playwright. In a Serenity JUnit test, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Managed")," annotation to manage the WebDriver lifecycle. Once we have a driver available, we can assign it to an actor using the ",(0,i.kt)("inlineCode",{parentName:"p"},"BrowseTheWeb")," class like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@ExtendWith(SerenityJUnit5Extension.class)\nclass AddNewTodosWithAManagedDriver {\n\n    @Managed\n    WebDriver driver;\n\n    @Test\n    @DisplayName("Add a todo item to an empty list")\n    void addToEmptyList() {\n        Actor toby = Actor.named("Toby")\n                          .whoCan(BrowseTheWeb.with(driver));\n    ...\n    }\n}\n')),(0,i.kt)("h3",{id:"actors-in-cucumber"},"Actors in Cucumber"),(0,i.kt)("p",null,"Setting up actors in Cucumber is a little more compicated than in JUnit, because we generally refer to them by name in the Cucumber scenarios. Suppose for example we want to automate the following scenario:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gherkin"},'  Scenario: Add items to an empty list\n    Given Toby starts with an empty list\n    When he adds "Buy some milk" to his list\n    Then the todo list should contain the following items:\n      | Buy some milk |\n')),(0,i.kt)("h4",{id:"using-a-managed-driver-with-cucumber"},"Using a Managed driver with Cucumber"),(0,i.kt)("p",null,"We can use the same approach as we used for JUnit in our Cucumber step definition files, declaring a Webdriver instance using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Managed")," annotation and assigning it to our actor using the ",(0,i.kt)("inlineCode",{parentName:"p"},"BrowseTheWeb")," ability class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class TodoStepDefinitions {\n\n    @Managed\n    WebDriver driver;\n\n    Actor toby = Actor.named("Toby");\n\n    @Before\n    public void setupActor() {\n        toby.can(BrowseTheWeb.with(driver));\n    }\n\n    @Given("Toby starts with an empty list")\n    public void stats_with_an_empty_list() {\n        toby.attemptsTo(\n                Open.url("https://todomvc.com/examples/angularjs/#/")\n        );\n    }\n')),(0,i.kt)("p",null,'However, the name of the actor ("Toby") is part of the scenario steps. We may want to have other scenarios with other actors, or have a scenario involving more than one actor. '),(0,i.kt)("h4",{id:"casts-and-stages"},"Casts and Stages"),(0,i.kt)("p",null,"We can make our Cucumber step definitions more flexible by introducing the concept of a ",(0,i.kt)("em",{parentName:"p"},"Cast")," of actors, and a ",(0,i.kt)("em",{parentName:"p"},"stage")," on which they perform. "),(0,i.kt)("p",null,"A ",(0,i.kt)("em",{parentName:"p"},"Cast")," is a class whose job is to provide actors with a specific set of abilities, when we need them to play a role in our tests. For example, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"OnlineCast")," class to provide actors who are equiped with their own Webdriver instances. This way, we don't need to declare the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Managed")," driver, and each actor can have their own browser if we have a scenario with more than one actor."),(0,i.kt)("p",null,"A ",(0,i.kt)("em",{parentName:"p"},"stage")," is where our actors perform their roles. A scenario has a single stage, that we can use to identify an actor by name or find the currently active actor. "),(0,i.kt)("p",null,"We need to assign a cast to the stage at the start of each scenario; we can do this by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"OnStage.setTheStage()")," method and passing in a specific cast, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"OnStage.setTheStage(new OnlineCast());\n")),(0,i.kt)("p",null,"Once we have set the stage, we can obtain an actor with a given name using the ",(0,i.kt)("inlineCode",{parentName:"p"},"OnState.theActorCalled()")," method, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'Actor toby = OnStage.theActorCalled("Toby");\n')),(0,i.kt)("p",null,"Using this approach, we could implement the first step of our scenario in a way that will work no matter which actor is involved, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @Given("{word} starts with an empty list")\n    public void stats_with_an_empty_list(String actorName) {\n        Actor actor = OnStage.theActorCalled(actorName);\n        actor.attemptsTo(\n                Open.url("https://todomvc.com/examples/angularjs/#/")\n        );\n    }\n')),(0,i.kt)("p",null,"We could even define a custom Cucumber expression so that we don't have to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"OnStage.theActorCalled()")," method each time:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @ParameterType(".*")\n    public Actor actor(String actorName) {\n        return OnStage.theActorCalled(actorName);\n    }\n\n    @Given("{actor} starts with an empty list")\n    public void stats_with_an_empty_list(Actor actor) {\n        actor.attemptsTo(\n                Open.url("https://todomvc.com/examples/angularjs/#/")\n        );\n    }\n')),(0,i.kt)("p",null,"This way, our next step can simply use a parameter of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Actor"),", like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @When("{actor} adds {string} to his list")\n    public void he_adds_to_his_list(Actor actor, String item) {\n        actor.attemptsTo(\n                Enter.theValue(item).into(".new-todo").thenHit(Keys.RETURN)\n        );\n    }\n')),(0,i.kt)("h4",{id:"the-actor-in-the-spotlight"},"The Actor in the spotlight"),(0,i.kt)("p",null,'Sometimes a step does not refer to an actor by name, but implicitly refers to the last actor who did anything in the scenario. For example, the third step, "Then the todo list should contain the following items..." does not have an explicit actor. '),(0,i.kt)("p",null,"In these situations, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"OnStage.theActorInTheSpotlight()")," method to refer to the last known active actor. For example, we could implement the third step of our scenario like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @Then("the todo list should contain the following items:")\n    public void the_todo_list_should_contain(List<String> expectedItems) {\n        Actor currentActor = OnStage.theActorInTheSpotlight();\n        var todos = currentActor.asksFor(Text.ofEach(".todo-list li"));\n        assertThat(todos).containsExactlyElementsOf(expectedItems);\n    }\n')),(0,i.kt)("h2",{id:"grouping-interactions-into-tasks"},"Grouping interactions into tasks"),(0,i.kt)("p",null,"Screenplay aims to make it easy to write maintainable and scaleable automation code. And an important way to do this is by grouping interactions into reusable sequences that represent higher level domain concepts."),(0,i.kt)("p",null,"For example, the following test shows how to login to the ",(0,i.kt)("a",{parentName:"p",href:"https://www.saucedemo.com/"},"https://www.saucedemo.com/")," test site:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'        toby.attemptsTo(\n                Open.url("https://www.saucedemo.com/"),\n                Enter.theValue("standard_user").into("#user-name"),\n                Enter.theValue("secret_sauce").into("#password"),\n                Click.on("#login-button")\n        );\n')),(0,i.kt)("p",null,"These four lines involve all login in to the site. However it is hard to see that at a glance when reading the code. We could make this code much more readable by grouping these interactions into a single task. "),(0,i.kt)("h3",{id:"grouping-interactions-using-the-task-class"},"Grouping interactions using the Task class"),(0,i.kt)("p",null,"A better approach would be to group these related interactions into a single ",(0,i.kt)("inlineCode",{parentName:"p"},"Task"),". "),(0,i.kt)("p",null,"The simplest way to do this is to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Task.where()")," method. This method lets us return a task (or more precisely, an implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Performable")," interface) that combines several other tasks or interactions. "),(0,i.kt)("p",null,"The task that allows an actor to login as a standard user could look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class Login {\n    public static Task asAStandardUser() {\n        return Task.where(\n                Open.url("https://www.saucedemo.com/"),\n                Enter.theValue("standard_user").into("#user-name"),\n                Enter.theValue("secret_sauce").into("#password"),\n                Click.on("#login-button")\n        );\n    }\n}\n')),(0,i.kt)("p",null,"We might want to make our task more configurable, by adding some parameters to the method signature. In this case, it is useful to make our task more descriptive by adding a text description before the list of _Performable_s, as shown below. This description will appear in the reports whenever the task is executed. The ",(0,i.kt)("inlineCode",{parentName:"p"},"{0}"),' in the description will be replaced by the name of the actor (so "Toby" in our test). '),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class Login {\n    public static Performable as(String username, String password) {\n        return Task.where(\n                "{0} logs in as " + username,\n                Open.url("https://www.saucedemo.com/"),\n                Enter.theValue(username).into("#user-name"),\n                Enter.theValue(password).into("#password"),\n                Click.on("#login-button")\n        );\n    }\n}\n')),(0,i.kt)("p",null,"We can now refactor our original test using this method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"        toby.attemptsTo(Login.asAStandardUser());\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'        toby.attemptsTo(Login.as("standard_user","secret_sauce"));\n')),(0,i.kt)("h3",{id:"using-lambda-expressions-to-create-custom-tasks"},"Using lambda expressions to create custom tasks"),(0,i.kt)("p",null,"So far we havce seen how to create a ",(0,i.kt)("em",{parentName:"p"},"Task")," from a list of other tasks or interactions. But sometimes we need to have more control over the logic of our task. We can do this very easily using lambda expressions, which give us total control over how our task should work. "),(0,i.kt)("p",null,"For example, imagine we have refactored our TodoMVC example above to use the following Task class to open the TodoMVC application with an empty list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\npublic class Start {\n    public static Performable withAnEmptyTodoList() {\n        return Task.where("{0} starts with an empty todo list",\n                Open.url("https://todomvc.com/examples/angularjs/#/")\n        );\n    }\n')),(0,i.kt)("p",null,"We could also create a task to add a todo item to the list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class AddATodoItem {\n    public static Performable called(String thingToDo) {\n        return Task.where("{0} adds a todo item called " + thingToDo,\n                Enter.theValue(item).into(".new-todo").thenHit(Keys.RETURN)\n        );\n    }\n}\n')),(0,i.kt)("p",null,"Now suppose we want to allow Toby to start with some elements already in his list. We could imagine a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Start.withAListContainingTheItems(...)")," method like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'        toby.attemptsTo(\n                Start.withAListContaingTheItems("Feed the cat","Buy some bread")\n        );\n')),(0,i.kt)("p",null,"However to implement this method, we need to loop over the provided list of items, and call the ",(0,i.kt)("inlineCode",{parentName:"p"},"AddATodoItem")," task for each of them. We can do this by using a Lambda expression instead of a list of _Performable_s. The Lambda expression takes an actor as a parameter, and allows us to write arbitrary blocks of code to implement our task. For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"withAListContaingTheItems()")," method might look like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    public static Performable withAListContaingTheItems(String... items) {\n        return Task.where("{0} starts with a list containing " + Arrays.asList(items),\n                actor -> {\n                    actor.attemptsTo(Start.withAnEmptyTodoList());\n                    for (String item : items) {\n                        actor.attemptsTo(AddATodoItem.called(item));\n                    }\n                }\n        );\n')),(0,i.kt)("p",null,"The full ",(0,i.kt)("inlineCode",{parentName:"p"},"Start")," class would now look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class Start {\n    public static Performable withAnEmptyTodoList() {\n        return Task.where("{0} starts with an empty todo list",\n                Open.url("https://todomvc.com/examples/angularjs/#/")\n        );\n    }\n\n    public static Performable withAListContaingTheItems(String... items) {\n        return Task.where("{0} starts with a list containing " + Arrays.asList(items),\n                actor -> {\n                    actor.attemptsTo(Start.withAnEmptyTodoList());\n                    for (String item : items) {\n                        actor.attemptsTo(AddATodoItem.called(item));\n                    }\n                }\n        );\n    }\n}\n\n')),(0,i.kt)("h3",{id:"writing-custom-performable-classes"},"Writing custom Performable classes."),(0,i.kt)("h2",{id:"questions---querying-the-state-of-the-system"},"Questions - querying the state of the system"),(0,i.kt)("p",null,"Now that we have seen how to set up a Screenplay test using different frameworks, how to organise interactions into tasks, and how to query the state of the system, we will look at how to use Screenplay to interact with a web application in more detail."))}d.isMDXComponent=!0},8375:function(e,t,n){t.Z=n.p+"assets/images/screenplay-model-d488f442690c701509fec447d3200a99.svg"}}]);